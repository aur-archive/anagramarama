--- anagramarama/anagramarama.6
+++ anagramarama/anagramarama.6
@@ -0,0 +1,23 @@
+.\"                                      Hey, EMACS: -*- nroff -*-
+.TH ANAGRAMARAMA 6  "January  4, 2005"
+.SH NAME
+anagramarama \- cute anagram game using SDL
+.SH SYNOPSIS
+.B anagramarama
+.RI
+.br
+.SH DESCRIPTION
+.B anagramarama
+is a simple wordgame in which one tries to guess all the different
+permutations of a scrambled word which form another word within the
+time limit.  Guess the original word and you move on to the next
+level.
+.PP
+.SH OPTIONS
+None, currently.
+.br
+.SH AUTHOR
+anagramarama was written by Colm Gallagher <colm@coralquest.com>
+.PP
+This manual page was written by Ryan Stutsman <rstutsma@purdue.edu>,
+for the Debian project (but may be used by others).
--- anagramarama/makefile
+++ anagramarama/makefile
@@ -1,27 +1,47 @@
-LFLAGS=-Wall -funroll-loops -fomit-frame-pointer -pipe -O9
-CFLAGS=-Wall `sdl-config --cflags --libs` -funroll-loops -fomit-frame-pointer -pipe -O9 -lSDL_mixer
-CC=gcc
+CFLAGS=-Wall -O3
+CPPFLAGS=`sdl-config --cflags` -DDATA_DIR=\"$(DATA_DESTDIR)\" \
+	-DIMAGES_DIR=\"$(IMAGES_DESTDIR)\" -DAUDIO_DIR=\"$(AUDIO_DESTDIR)\"
+LDLIBS=-lSDL_mixer `sdl-config --libs`
 
 C_FILES=src/dlb.c src/linked.c src/sprite.c src/ag.c
 OBJ_FILES=src/dlb.o src/linked.o src/sprite.o src/ag.o
-OUT_FILE=ag
 
-all:ag
+BIN=anagramarama
 
-ag: $(OBJ_FILES)
-	$(CC) $(CFLAGS) -o $(OUT_FILE) $(OBJ_FILES)
+DATA_DESTDIR=$(DESTDIR)/usr/share/anagramarama
+AUDIO_DESTDIR=$(DATA_DESTDIR)/audio
+IMAGES_DESTDIR=$(DATA_DESTDIR)/images
 
-src/dlb.o: src/dlb.c
-	$(CC) $(LFLAGS) -c -o $@ $^
+DATA_FILES=wordlist.txt
+AUDIO_FILES=badword.wav click-answer.wav clock-tick.wav found.wav shuffle.wav \
+	clearword.wav click-shuffle.wav duplicate.wav foundbig.wav
+IMAGE_FILES=background.bmp numberBank.bmp letterBank.bmp smallLetterBank.bmp
 
-src/linked.o: src/linked.c
-	$(CC) $(LFLAGS) -c -o $@ $^
-	
-src/sprite.o: src/sprite.c
-	$(CC) $(LFLAGS) -c -o $@ $^
+.PHONY: all clean install
+
+all: $(BIN)
 
-src/ag.o: src/ag.c
-	$(CC) $(LFLAGS) -c -o $@ $^
+$(BIN): $(OBJ_FILES)
+	$(CC) $(CFLAGS) $(CPPFLAGS) -o $(BIN) $(OBJ_FILES) $(LDLIBS)
 
 clean:
-	rm -f src/*.o
+	rm -f $(BIN) src/*.o
+
+install: $(BIN)
+	mkdir -p $(DESTDIR)/usr/bin/
+	install -m 755 anagramarama $(DESTDIR)/usr/bin
+	
+	mkdir -p $(DATA_DESTDIR)
+	for i in $(DATA_FILES); do \
+		install -m 644 $$i $(DATA_DESTDIR); \
+	done
+	
+	mkdir -p $(AUDIO_DESTDIR)
+	for i in $(AUDIO_FILES); do \
+		install -m 644 ./audio/$$i $(AUDIO_DESTDIR); \
+	done
+	
+	mkdir -p $(IMAGES_DESTDIR)
+	for i in $(IMAGE_FILES); do \
+		install -m 644 images/$$i $(IMAGES_DESTDIR); \
+	done
--- anagramarama/src/ag.c
+++ anagramarama/src/ag.c
@@ -184,15 +184,15 @@
 ***********************************************************/
 void bufferSounds(struct sound** soundCache){
 
-	pushSound(&(*soundCache),"click-answer", "audio/click-answer.wav");
-	pushSound(&(*soundCache),"click-shuffle", "audio/click-shuffle.wav");
-	pushSound(&(*soundCache),"foundbig", "audio/foundbig.wav");
-	pushSound(&(*soundCache),"found", "audio/found.wav");
-	pushSound(&(*soundCache),"clear", "audio/clearword.wav");
-	pushSound(&(*soundCache),"duplicate", "audio/duplicate.wav");
-	pushSound(&(*soundCache),"badword", "audio/badword.wav");
-	pushSound(&(*soundCache),"shuffle", "audio/shuffle.wav");
-	pushSound(&(*soundCache),"clock-tick", "audio/clock-tick.wav");
+	pushSound(&(*soundCache),"click-answer", AUDIO_DIR "/click-answer.wav");
+	pushSound(&(*soundCache),"click-shuffle", AUDIO_DIR "/click-shuffle.wav");
+	pushSound(&(*soundCache),"foundbig", AUDIO_DIR "/foundbig.wav");
+	pushSound(&(*soundCache),"found", AUDIO_DIR "/found.wav");
+	pushSound(&(*soundCache),"clear", AUDIO_DIR "/clearword.wav");
+	pushSound(&(*soundCache),"duplicate", AUDIO_DIR "/duplicate.wav");
+	pushSound(&(*soundCache),"badword", AUDIO_DIR "/badword.wav");
+	pushSound(&(*soundCache),"shuffle", AUDIO_DIR "/shuffle.wav");
+	pushSound(&(*soundCache),"clock-tick", AUDIO_DIR "audio/clock-tick.wav");
 
 }
 
@@ -982,7 +982,7 @@
 int done = 0;
 
 	filelocation = rand()%10000;
-	wordlist=fopen("wordlist.txt","r");
+	wordlist=fopen(DATA_DIR "/wordlist.txt","r");
 
 	for (i=0;i<=filelocation;i++){
 
@@ -1485,7 +1485,7 @@
 int i;
 
 	// show background
-	ShowBMP("images/background.bmp",screen, 0,0);
+	ShowBMP(IMAGES_DIR "/background.bmp",screen, 0,0);
 
 	destroyLetters(&(*letters));
 
@@ -1760,9 +1760,9 @@
 	createDLBTree(&dlbHead);
 
 	// cache in-game graphics
-	letterBank = SDL_LoadBMP("images/letterBank.bmp");
-	smallLetterBank = SDL_LoadBMP("images/smallLetterBank.bmp");
-	numberBank = SDL_LoadBMP("images/numberBank.bmp");
+	letterBank = SDL_LoadBMP(IMAGES_DIR "/letterBank.bmp");
+	smallLetterBank = SDL_LoadBMP(IMAGES_DIR "/smallLetterBank.bmp");
+	numberBank = SDL_LoadBMP(IMAGES_DIR "/numberBank.bmp");
 
 	rootWord = malloc(sizeof(char)*9);
 	newGame(&head, dlbHead, screen, &letters);
--- anagramarama/src/dlb.c
+++ anagramarama/src/dlb.c
@@ -100,7 +100,7 @@
 	//printf("createDLBTree\n");
 
 	// open wordlist file
-	wordlist = fopen("wordlist.txt", "r");
+	wordlist = fopen(DATA_DIR "/wordlist.txt", "r");
 
 	// get each word from the list
 	while (fscanf(wordlist, "%s", wordFromList) != EOF){
